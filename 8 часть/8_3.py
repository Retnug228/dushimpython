""" 
    тут гпт-код, вот его комментарии по коду:
    Жадный алгоритм с сортировкой:
    Мы можем отсортировать пары по второму элементу каждой пары.
    Затем, начиная с первой пары, будем последовательно добавлять пары в цепочку, если начало текущей пары больше конца последней добавленной пары.
    
    Сортировка: Мы сортируем пары по их второму элементу. Это позволяет нам проверять возможность добавления пары в цепочку, гарантируя, что любая последующая пара будет иметь конец не меньше предыдущей.
    Инициализация: Начинаем с curr_end равным минус бесконечности и max_chain_length равным нулю.
    Проход по парам: Для каждой пары проверяем, можно ли ее добавить к цепочке (т.е., её начало больше текущего конца). Если можно, обновляем конец цепочки и увеличиваем счетчик.



"""


def findLongestChain(pairs):
    # Сортируем пары по второму элементу
    pairs.sort(key=lambda x: x[1])
    
    # Инициализируем счетчик длины цепочки и текущий конец цепочки
    curr_end = float('-inf')
    max_chain_length = 0
    
    # Проходим по отсортированным парам
    for pair in pairs:
        if curr_end < pair[0]:
            # Если текущий конец меньше начала новой пары, обновляем конец и увеличиваем счетчик
            curr_end = pair[1]
            max_chain_length += 1
    
    return max_chain_length

# Примеры использования функции
print(findLongestChain([[1, 2], [2, 3], [3, 4]]))  # Output: 2
print(findLongestChain([[1, 2], [7, 8], [4, 5]]))  # Output: 3